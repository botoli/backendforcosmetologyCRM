// telegram/bot.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ
const TelegramBot = require('node-telegram-bot-api');

class TelegramBotManager {
  constructor(token, db) {
    this.bot = new TelegramBot(token, { polling: true });
    this.db = db;
    this.setupHandlers();
  }

  setupHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const username = msg.from.username;

      console.log(`üì± Telegram /start command from: ${chatId}, username: @${username}`);

      try {
        await this.bot.sendMessage(
          chatId,
          `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–ª–æ–Ω–∞!\n\n` +
            `–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link\n` +
            `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ - /help`,
          {
            reply_markup: {
              keyboard: [['/link', '/help']],
              resize_keyboard: true,
            },
          },
        );
      } catch (error) {
        console.error('Error sending start message:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link
    this.bot.onText(/\/link/, async (msg) => {
      const chatId = msg.chat.id;
      const username = msg.from.username;

      console.log(`üîó Telegram /link command from: ${chatId}`);

      try {
        await this.bot.sendMessage(
          chatId,
          `üîó –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n` +
            `1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ\n` +
            `2. –í —Ä–∞–∑–¥–µ–ª–µ "Telegram" –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"\n` +
            `3. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏:`,
        );
      } catch (error) {
        console.error('Error sending link message:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;

      try {
        await this.bot.sendMessage(
          chatId,
          `üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n` +
            `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n` +
            `/link - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n` +
            `/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n` +
            `–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–æ–≤.`,
        );
      } catch (error) {
        console.error('Error sending help message:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–æ–≤ –ø—Ä–∏–≤—è–∑–∫–∏ (6-–∑–Ω–∞—á–Ω—ã–µ –∫–æ–¥—ã)
    this.bot.onText(/^[A-Z0-9]{6}$/, async (msg, match) => {
      const chatId = msg.chat.id;
      const code = match[0];
      const telegramId = msg.from.id.toString();
      const telegramUsername = msg.from.username || '';

      console.log(`üîê Processing link code: ${code} from user: ${telegramId}`);

      try {
        const result = await this.db.verifyTelegramLink(code, telegramId, telegramUsername);

        if (result) {
          await this.bot.sendMessage(
            chatId,
            `‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n` +
              `–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n` +
              `‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö\n` +
              `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–µ–π\n` +
              `‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –æ –≤–∏–∑–∏—Ç–∞—Ö`,
            {
              reply_markup: {
                remove_keyboard: true,
              },
            },
          );
          console.log(`‚úÖ Telegram account linked: ${telegramId} -> user ${result.userId}`);
        }
      } catch (error) {
        console.error('Error verifying telegram link:', error);
        await this.bot.sendMessage(
          chatId,
          `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏.\n\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`,
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (msg) => {
      const chatId = msg.chat.id;
      const text = msg.text;

      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
      if (text && !text.startsWith('/') && !/^[A-Z0-9]{6}$/.test(text)) {
        await this.bot.sendMessage(
          chatId,
          `ü§ñ –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–ª–æ–Ω–∞.\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
            `/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
            `/link - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n` +
            `/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É`,
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      console.error('‚ùå Telegram Bot Error:', error);
    });

    console.log('‚úÖ Telegram bot handlers setup complete');
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  async notifyUserAboutBooking(booking, service, user) {
    try {
      if (!user.telegram_id) {
        console.log('‚ùå No telegram_id for user:', user.id);
        return;
      }

      const message =
        `üìÖ –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É!\n\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${user.name} ${user.surname}\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n` +
        `üíÜ –£—Å–ª—É–≥–∞: ${service.name}\n` +
        `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price} —Ä—É–±.\n` +
        `üìÖ –î–∞—Ç–∞: ${booking.booking_date}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${booking.booking_time}\n` +
        `üìù –°—Ç–∞—Ç—É—Å: ${this.getStatusText(booking.status)}\n` +
        (booking.comment ? `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${booking.comment}\n` : '') +
        `\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.`;

      await this.bot.sendMessage(user.telegram_id, message);
      console.log('‚úÖ User notification sent to:', user.telegram_id);
    } catch (error) {
      console.error('‚ùå Error sending user notification:', error);
      throw error;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  async notifyAdminsAboutNewBooking(booking, service, user) {
    try {
      const admins = await this.db.getAdmins();

      if (admins.length === 0) {
        console.log('‚ùå No admins found for notification');
        return;
      }

      const message =
        `üÜï –ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!\n\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${user.name} ${user.surname}\n` +
        `üìß Email: ${user.email}\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n` +
        `üíÜ –£—Å–ª—É–≥–∞: ${service.name}\n` +
        `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price} —Ä—É–±.\n` +
        `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${service.duration} –º–∏–Ω.\n` +
        `üìÖ –î–∞—Ç–∞: ${booking.booking_date}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${booking.booking_time}\n` +
        (booking.comment ? `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${booking.comment}\n` : '') +
        `\nüÜî ID –∑–∞–ø–∏—Å–∏: ${booking.id}`;

      let sentCount = 0;
      for (const admin of admins) {
        if (admin.telegram_id) {
          try {
            await this.bot.sendMessage(admin.telegram_id, message);
            sentCount++;
            console.log('‚úÖ Admin notification sent to:', admin.telegram_id);
          } catch (error) {
            console.error(`‚ùå Failed to send to admin ${admin.telegram_id}:`, error.message);
          }
        }
      }

      console.log(`‚úÖ Notifications sent to ${sentCount}/${admins.length} admins`);
    } catch (error) {
      console.error('‚ùå Error sending admin notifications:', error);
      throw error;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
  async notifyUserAboutBookingStatus(booking, service, user, newStatus) {
    try {
      if (!user.telegram_id) {
        console.log('‚ùå No telegram_id for user:', user.id);
        return;
      }

      const statusText = this.getStatusText(newStatus);
      const message =
        `üì¢ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω\n\n` +
        `üíÜ –£—Å–ª—É–≥–∞: ${service.name}\n` +
        `üìÖ –î–∞—Ç–∞: ${booking.booking_date}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${booking.booking_time}\n` +
        `üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${statusText}\n` +
        (newStatus === 'cancelled'
          ? `\n‚ùå –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.`
          : newStatus === 'confirmed'
          ? `\n‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥–µ–º –≤–∞—Å –≤ —Å–∞–ª–æ–Ω–µ.`
          : newStatus === 'completed'
          ? `\n‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∏–∑–∏—Ç! –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞.`
          : '');

      await this.bot.sendMessage(user.telegram_id, message);
      console.log('‚úÖ Status notification sent to user:', user.telegram_id);
    } catch (error) {
      console.error('‚ùå Error sending status notification:', error);
      throw error;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  getStatusText(status) {
    const statusMap = {
      pending: '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      confirmed: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
      completed: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
      cancelled: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ',
    };
    return statusMap[status] || status;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏
  async sendReminder(booking, service, user, hoursBefore = 24) {
    try {
      if (!user.telegram_id) {
        return;
      }

      const message =
        `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏\n\n` +
        `üíÜ –£—Å–ª—É–≥–∞: ${service.name}\n` +
        `üìÖ –î–∞—Ç–∞: ${booking.booking_date}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${booking.booking_time}\n` +
        `üìç –ê–¥—Ä–µ—Å: [–∞–¥—Ä–µ—Å —Å–∞–ª–æ–Ω–∞]\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: [–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω]\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 10-15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.`;

      await this.bot.sendMessage(user.telegram_id, message);
      console.log('‚úÖ Reminder sent to user:', user.telegram_id);
    } catch (error) {
      console.error('‚ùå Error sending reminder:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
  async testBot() {
    try {
      const me = await this.bot.getMe();
      console.log('‚úÖ Telegram bot is running:', me.username);
      return true;
    } catch (error) {
      console.error('‚ùå Telegram bot test failed:', error);
      return false;
    }
  }

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  start() {
    console.log('ü§ñ Starting Telegram bot...');
    this.testBot();
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  stop() {
    console.log('üõë Stopping Telegram bot...');
    this.bot.stopPolling();
  }
}

module.exports = TelegramBotManager;
